generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SubscriptionPlan {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float
  maxUsers    Int
  maxVehicles Int
  createdAt   DateTime @default(now())

  agencies    Agency[]
}

model Agency {
  id             Int       @id @default(autoincrement())
  name           String    // Nom commercial
  legal_name     String?   // Nom légal SARL
  ice            String?   // ICE marocain
  rc             String?   // Registre du commerce
  patente        String?   // N° de patente
  cnss           String?   // CNSS
  address        String?
  city           String?
  logo_url       String?
  email          String    @unique
  phone          String?
  createdAt      DateTime  @default(now())

  subscriptionId Int
  subscription   SubscriptionPlan @relation(fields: [subscriptionId], references: [id])

  users          User[]
  vehicles       Vehicle[]
  clients        Client[]
  reservations   Reservation[]
}

model User {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  phone      String?
  email      String   @unique
  password   String
  address    String?
  role       String   @default("admin") // "admin" ou "employee"
  agencyId   Int
  agency     Agency   @relation(fields: [agencyId], references: [id])
  createdAt  DateTime @default(now())

  reservations Reservation[]
}

model Vehicle {
  id            Int      @id @default(autoincrement())
  make          String
  model         String
  plate         String   @unique
  price_per_day Float
  status        String
  image_url     String?
  created_at    DateTime @default(now())
  agencyId      Int
  agency        Agency   @relation(fields: [agencyId], references: [id])

  reservations  Reservation[]
  incidents     IncidentClient[]
}

model Client {
  id               Int      @id @default(autoincrement())
  name             String
  cin              String
  phone            String
  email            String?
  driver_license   String
  status           String   @default("normal")
  notes            String?
  created_at       DateTime @default(now())
  agencyId         Int
  agency           Agency   @relation(fields: [agencyId], references: [id])

  // Pièces jointes (URLs)
  cin_front_url     String?
  cin_back_url      String?
  license_front_url String?
  license_back_url  String?
  passport_url      String?
  other_documents   String[]  // ex: preuve adresse, doc client...

  reservations     Reservation[]
  incidents        IncidentClient[]
}

model Reservation {
  id           Int      @id @default(autoincrement())
  client_id    Int
  vehicle_id   Int
  user_id      Int
  agencyId     Int
  start_date   DateTime
  end_date     DateTime
  total_price  Float
  status       String   @default("confirmed")
  created_at   DateTime @default(now())

  client       Client     @relation(fields: [client_id], references: [id])
  vehicle      Vehicle    @relation(fields: [vehicle_id], references: [id])
  user         User       @relation(fields: [user_id], references: [id])
  agency       Agency     @relation(fields: [agencyId], references: [id])
  contract     Contract?
}

model Contract {
  id              Int      @id @default(autoincrement())
  reservation_id  Int      @unique
  contract_url    String
  signed          Boolean  @default(false)
  created_at      DateTime @default(now())

  reservation     Reservation @relation(fields: [reservation_id], references: [id])
}

model IncidentClient {
  id            Int      @id @default(autoincrement())
  client_id     Int
  vehicle_id    Int
  date          DateTime
  type_incident String
  gravite       String
  commentaire   String
  images        String[]  // URLs des images (photos, dégâts...)

  client        Client   @relation(fields: [client_id], references: [id])
  vehicle       Vehicle  @relation(fields: [vehicle_id], references: [id])
}