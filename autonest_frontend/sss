// ------------------------------------
// ðŸ“„ schema.prisma â€“ ModÃ¨le SaaS complet avec gestion des essais gratuits
// ------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  employee
  viewer
  superadmin
}

enum ClientStatus {
  normal
  vip
  late
  blacklisted
}

enum ReservationStatus {
  confirmed
  cancelled
  pending
  finished
}

enum CarStatus {
  available
  rented
  maintenance,
}

enum DocumentType {
  CIN_FRONT
  CIN_BACK
  LICENSE_FRONT
  LICENSE_BACK
  PASSPORT
  OTHER
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

enum NotificationType {
  system
  billing
  alert
  reservation
}

enum IncidentType {
  accident
  scratch
  theft
  other
}

enum Severity {
  minor
  major
  critical
}

model Agency {
  id               Int              @id @default(autoincrement())
  name             String
  legalName        String?
  ice              String?
  rc               String?
  patente          String?
  cnss             String?
  address          String?
  city             String?
  logoUrl          String?
  email            String           @unique
  phone            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  subscriptionId   Int
  isActive         Boolean          @default(true)
  subscriptionPlan SubscriptionPlan @relation(fields: [subscriptionId], references: [id])

  // Optional: current trial flags (can be inferred from Trial instead)
  isTrialActive  Boolean   @default(false)
  trialStartedAt DateTime?
  trialEndsAt    DateTime?

  clients       Client[]
  reservations  Reservation[]
  vehicles      Vehicle[]
  payments      Payment[]
  invoices      Invoice[]
  notifications Notification[]
  settings      AgencySetting[]
  trial         Trial?
  trialHistory  TrialHistory[]
  users        AgencyUser[]
}

model User {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  phone        String?
  email        String        @unique
  password     String
  address      String?
  role         UserRole      @default(admin)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]
  logs         AuditLog[]
  agencies     AgencyUser[]
}

model Client {
  id            Int              @id @default(autoincrement())
  name          String
  cin           String
  phone         String
  email         String?
  driverLicense String
  status        ClientStatus     @default(normal)
  notes         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  agencyId      Int
  agency        Agency           @relation(fields: [agencyId], references: [id])
  documents     ClientDocument[]
  incidents     IncidentClient[]
  reservations  Reservation[]
}

model ClientDocument {
  id        Int          @id @default(autoincrement())
  url       String
  type      DocumentType
  clientId  Int
  createdAt DateTime     @default(now())
  client    Client       @relation(fields: [clientId], references: [id])
}

model Vehicle {
  id           Int              @id @default(autoincrement())
  make         String
  model        String
  plate        String           @unique
  pricePerDay  Float
  status       CarStatus        @default(available)
  imageUrl     String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  agencyId     Int
  agency       Agency           @relation(fields: [agencyId], references: [id])
  reservations Reservation[]
  incidents    IncidentClient[]
}

model Reservation {
  id         Int               @id @default(autoincrement())
  clientId   Int
  vehicleId  Int
  userId     Int
  agencyId   Int
  startDate  DateTime
  endDate    DateTime
  totalPrice Float
  status     ReservationStatus @default(confirmed)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  contract   Contract?
  notes      String?

  agency  Agency  @relation(fields: [agencyId], references: [id])
  client  Client  @relation(fields: [clientId], references: [id])
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model Contract {
  id            Int         @id @default(autoincrement())
  reservationId Int         @unique
  contractUrl   String
  signed        Boolean     @default(false)
  createdAt     DateTime    @default(now())
  reservation   Reservation @relation(fields: [reservationId], references: [id])
}

model IncidentClient {
  id           Int          @id @default(autoincrement())
  clientId     Int
  vehicleId    Int
  date         DateTime
  incidentType IncidentType
  severity     Severity
  commentaire  String
  images       String[]
  client       Client       @relation(fields: [clientId], references: [id])
  vehicle      Vehicle      @relation(fields: [vehicleId], references: [id])
}

model SubscriptionPlan {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float
  maxUsers    Int
  maxVehicles Int
  createdAt   DateTime @default(now())
  agencies    Agency[]
}

model Payment {
  id        Int           @id @default(autoincrement())
  agencyId  Int
  amount    Float
  currency  String        @default("MAD")
  method    String
  status    PaymentStatus @default(pending)
  paidAt    DateTime?
  createdAt DateTime      @default(now())
  agency    Agency        @relation(fields: [agencyId], references: [id])
  invoice   Invoice?
}

model Invoice {
  id        Int      @id @default(autoincrement())
  agencyId  Int
  paymentId Int      @unique
  number    String   @unique
  total     Float
  pdfUrl    String?
  issuedAt  DateTime @default(now())
  agency    Agency   @relation(fields: [agencyId], references: [id])
  payment   Payment  @relation(fields: [paymentId], references: [id])
}

model Notification {
  id        Int              @id @default(autoincrement())
  agencyId  Int?
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  agency    Agency?          @relation(fields: [agencyId], references: [id])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  action    String
  details   String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model AgencySetting {
  id        Int      @id @default(autoincrement())
  agencyId  Int
  key       String
  value     String
  agency    Agency   @relation(fields: [agencyId], references: [id])
  createdAt DateTime @default(now())
}

model Trial {
  id        Int      @id @default(autoincrement())
  agencyId  Int      @unique
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  agency    Agency   @relation(fields: [agencyId], references: [id])
}

model TrialHistory {
  id        Int      @id @default(autoincrement())
  agencyId  Int
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  agency    Agency   @relation(fields: [agencyId], references: [id])
}

model AgencyUser {
  id         Int       @id @default(autoincrement())
  userId     Int
  agencyId   Int
  role       UserRole  @default(employee)
  invitedBy  Int?
  createdAt  DateTime  @default(now())

  user       User      @relation(fields: [userId], references: [id])
  agency     Agency    @relation(fields: [agencyId], references: [id])

  @@unique([userId, agencyId])
}
